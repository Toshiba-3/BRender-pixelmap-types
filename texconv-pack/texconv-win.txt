TEXCONV 1.1 (1997) from BRender 1.3.2
(yes, it's more recent than 2.x versions)
(compiled for win and dos by maarten thanks!)
Usage: texconv {options}

NOTES:
See texconv.bat for some command line examples.
This version will only generate 0x3D pixelmap file types.
! Reading/writing BR_PMT_RGBA_4444 and BR_PMT_ARGB_4444 are swapped.
For converting some pixelmaps back to tga, it is advised to try to convert to 
BR_PMT_RGB_888 before saving as tga in case colours seem messed up (converting 
from RGB_565 for example).
Reading/writing BR_PMT_INDEX_4 seems broken. Use TEXCONV 2.3 or TEXCONV 2.4.
Generating mipmaps only works properly for types RGB_888, RGB_565, RGB_555, 
and INDEX_8. And the TEXCONV might happen to miss the correct EOF, this can be 
fixed manually. Pay also attention to the end null padding (8x 0x00).
Pay attention older version of TEXCONV don't handle the Pixelmap encapsulation 
type 0x3D.
Can't be sure any version TEXCONV reads INDEXA_88 properly.

Options are treated as commands executed in left-to-right order -

   <input-file>             Load a file into current data
   -I <input-type>          Set input file type
   -O <output-type>         Set output file type

   -a                       Toggle current 32 bit pixelmaps to exclude/include
                            alpha data (default exclude)
   -c <pixelmap-type>[,t]   Convert to pixelmap type, may involve quantizing.
                            t is the alpha channel threshold (0-255) for
                            conversions involving 32 bit pixelmaps.
   -f                       'Forget' all current data
   -m <b,r>                 Mix (combine) all loaded palettes and quantize
                            to the (b)ase, and (r)ange.
   -w <b,r,weight,smap1>[,smap2, ...]
                            Mix (combine) all loaded palettes and quantize
                            to the (b)ase and (r)ange. For the arbitrary
                            number of super pixelmaps (smap1, smap2 etc.)
                            load them if necessary and use the specified
                            weight in the quantizer. A high weight (100)
                            will ensure that all the colours in the super-
                            maps appear in the resulting palette which is
                            applied to all textures. If a supermap is already
                            in Texconv it will also be converted to the new
                            palette, otherwise it will only be used to 
                            reserve colours.
   -n <name>                Assign identifier 'name' to data
   -o <file>                Generate output file from current data
   -p <pixelmap-type>       Convert all palettes from indexed pixelmaps to
                            new type. Default palette type BR_PMT_RGBX_888
   -r <file>,<pixelmap-type>,offset,x,y
                            Load raw data file as pixelmap-type,
                            with pixel dimensions x,y, from offset into file
   -s [<float>]             Scales the data to a square. The smallest power of
                            two {not smaller than the longest side of the
                            original} is chosen for the size of the scaled
                            pixelmap edges. The float value is an optional
                            filter size like the -S command uses
   -v [<pixelmap-type>]     View snapshot of current data as pixelmap-type
                            default BR_PMT_RGB_888
   -x                       Flip left/right
   -y                       Flip top/bottom

   -C <x,y>                 Reset pixelmap origin to x,y
   -F                       Toggle high/wide palettes. Default is high. Only
                            PlayStation currently requires wide palettes
   -M <b,r>                 Generate all mip levels to 1x1 from current
                            size (powers of 2).For indexed modes base=b range=r
   -N                       Generate all mip levels to 1x1 from current
                            size (powers of 2).
   -P <name>[,RAW]          Apply palette from a file to all current indexed
                            pixelmaps. If RAW is specified, the palette file
                            is 768 byte rgb, otherwise pixelmap format
   -Q <name>[,b,r]          Quantize to palette supplied (pixelmap format)
                            using (b)ase and (r)ange palette entries
   -R b,r                   Quantize and remap to (b)ase,(r)ange colours.
                            (0 <= b,r <256)
   -S x,y[,<float>]         Scale to new x,y dimensions using optional filter
                            size float (default 3.0)
   -X                       Exclude transparent pixels from remapping or
                            quantizing operations.
   @file                    perform all operation contained within <file>
                            Comments marked with ; or #
   <input-type> =
       pix    - BRender Pixelmap format
       bmp    - Windows BMP format   (4,8,24,RLE4,RLE8)
       gif    - CompuServ GIF format (1< x <=8 bit)
       tga    - Targa TGA format     (8,15,16,24,32 bit)
       iff    - Amiga IFF/LBM format (1< x <=8 bit)

   If a type is not specified, it will be guessed from the extension
   of the filename.

   <output-type> =
       palette         Palette information stripped from bitmap (.pix)
       image           Pixelmap without palette (.pix)
       pixelmap        Image with any palette information (.pix)
       targa           Output as .tga file

   If a type is not specified, the default is pixelmap

   <pixelmap-type> =
		BR_PMT_INDEX_1  	(Not supported)
		BR_PMT_INDEX_2  	(Not supported)
		BR_PMT_INDEX_4  	(4 bit indexed)
		BR_PMT_INDEX_8  	(8 bit indexed)

		BR_PMT_RGB_555  	(RGB 16 bit 5 bits per colour component)
		BR_PMT_RGB_565  	(RGB 16 bit 5,6,5 bit colour components)
		BR_PMT_RGB_888  	(RGB 24 bit 8 bits per colour component)
		BR_PMT_RGBX_888  	(RGB 32 bit 8 bits per colour component)
		BR_PMT_RGBA_8888  	(RGBA 32 bit 8 bits per colour component)

		BR_PMT_YUYV_8888  	(Not supported)
		BR_PMT_YUV_888  	(Not supported)
		BR_PMT_DEPTH_16  	(Not supported)
		BR_PMT_DEPTH_32  	(Not supported)
		BR_PMT_ALPHA_8  	(Opacity map)

		BR_PMT_INDEXA_88  	(Opacity + index) (Read-only, no write)
		BR_PMT_NORMAL_INDEX_8  	(Not supported)
		BR_PMT_NORMAL_XYZ  	(Not supported)
		BR_PMT_BGR_555  	(Reversed 16 bit 5 bits per colour component)
		BR_PMT_ARGB_4444	(ARGB 16 bit 4 bits per colour component)

		BR_PMT_RGB_bab  	(Not supported)
		BR_PMT_RGB_1aba  	(Not supported)
		BR_PMT_RGB_332  	(Not supported)
		BR_PMT_DEPTH_8  	(Not supported)
		BR_PMT_ARGB_8888	(Not supported)
		BR_PMT_ALPHA_4  	(Not supported)
		BR_PMT_INDEXA_44	(Not supported)
		BR_PMT_DEPTH_15  	(Not supported)
		BR_PMT_DEPTH_31  	(Not supported)
		BR_PMT_DEPTH_FP16	(Not supported)
		BR_PMT_DEPTH_FP15	(Not supported)

		BR_PMT_RGBA_5551	(Not supported)
		BR_PMT_ARGB_1555	(Not supported)

		BR_PMT_RGBA_4444  	(RGBA 16 bit 4 bits per colour component)